datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "./client"
}

model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  password         String
  isActivated      Boolean           @default(false) @map("is_activated")
  isAcceptedTerms  Boolean           @default(false) @map("is_accepted_terms")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  sessions         Session[]
  logs             Logs[]
  activationTokens ActivationToken[]
  userDevices      UserDevice[]

  @@map("users")
}

model UserDevice {
  id          String    @id @unique @default(uuid())
  userId      String    @map("user_id")
  deviceId    String    @default(uuid())
  fingerprint String
  ip          String
  userAgent   String
  isTrusted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  sessions    Session[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, deviceId], name: "user_device_pair")
  @@map("user_devices")
}

model ActivationToken {
  id        String   @unique @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  expiresIn DateTime @default(now()) @map("expires_in")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("activation_tokens")
}

model Session {
  id           String   @id @unique @default(uuid())
  token        String   @unique
  userId       String   @map("user_id")
  userDeviceId String   @map("user_device_id")
  lastActivity DateTime @default(now()) @map("last_activity")
  expiresIn    DateTime @default(now()) @map("expires_in")
  createdAt    DateTime @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userDevice UserDevice @relation(fields: [userDeviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sessions")
}

model Logs {
  id        String    @id @unique @default(uuid())
  messsage  String
  userId    String    @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("logs")
}
